{"ast":null,"code":"var _jsxFileName = \"/Users/shiziwizi/Documents/final-project-tekle-chronister/client/src/zComponents.js\",\n    _s = $RefreshSig$();\n\nimport Button from 'react-bootstrap/Button';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport React, { useState } from \"react\"; // Props\n// fieldList {key: \"Name\"} in Order\n// header true/falseee\n// data []\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CreateTable(props) {\n  const fields = Object.keys(props.fieldList);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [props.header && /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: fields.map((n, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: props.fieldList[n]\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 48\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 22\n      }, this), props.data.map(product => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: fields.map((n, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: product[n]\n        }, product.id + i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }, this))\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n} // export function Button () {\n// }\n\n_c = CreateTable;\nexport function ToggleButtonGroupControlled() {\n  _s();\n\n  const [value, setValue] = useState([1, 3]);\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n\n  const handleChange = val => setValue(val);\n\n  return /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n    type: \"checkbox\",\n    value: value,\n    onChange: handleChange,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Rating\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n      value: 1,\n      children: \"Bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n      value: 2,\n      children: \"Good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n      value: 3,\n      children: \"Excellent\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n} // TextBox with Label\n// Props\n// name - Required\n// labelCaption - Required\n// onChange\n\n_s(ToggleButtonGroupControlled, \"3vpzLrwqfItyVXfbP+JMq6+ozJQ=\");\n\n_c2 = ToggleButtonGroupControlled;\nexport function Textbox(props) {\n  const {\n    id,\n    name,\n    labelCaption,\n    className,\n    ...attributes\n  } = props;\n  return [/*#__PURE__*/_jsxDEV(\"label\", {\n    htmlFor: id || name,\n    children: labelCaption\n  }, name + 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 3\n  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"text\",\n    className: className || \"mx-sm-3\",\n    id: id || name,\n    name: name,\n    ...attributes\n  }, name + 1, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this)];\n} // Returns Bootstrap Button\n// title\n\n_c3 = Textbox;\nexport const XButton = /*#__PURE__*/React.memo(_c4 = function ({\n  title,\n  ...attributes\n}) {\n  return /*#__PURE__*/_jsxDEV(Button, { ...attributes,\n    children: title || \"Click\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 11\n  }, this);\n}); // Textbox or Text Area with Label\n\n_c5 = XButton;\nexport function FormTextbox(props) {\n  const {\n    textArea,\n    title,\n    name,\n    id = {\n      name\n    },\n    ...attributes\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"control-label col-sm-2\",\n      htmlFor: id,\n      children: [title, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-sm-10\",\n      children: textArea ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        required: true,\n        className: \"form-control\",\n        id: id,\n        rows: \"3\",\n        name: name,\n        ...attributes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        required: true,\n        type: \"text\",\n        className: \"form-control\",\n        id: id,\n        name: name,\n        ...attributes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n} // Render Radio Buttons\n\n_c6 = FormTextbox;\nexport function FormRadio(props) {\n  const {\n    title,\n    name,\n    id = {\n      name\n    },\n    ...attributes\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-check\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      required: true,\n      type: \"radio\",\n      className: \"form-check-input\",\n      id: id,\n      name: name,\n      ...attributes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"form-check-label\",\n      htmlFor: id,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_c7 = FormRadio;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"CreateTable\");\n$RefreshReg$(_c2, \"ToggleButtonGroupControlled\");\n$RefreshReg$(_c3, \"Textbox\");\n$RefreshReg$(_c4, \"XButton$React.memo\");\n$RefreshReg$(_c5, \"XButton\");\n$RefreshReg$(_c6, \"FormTextbox\");\n$RefreshReg$(_c7, \"FormRadio\");","map":{"version":3,"sources":["/Users/shiziwizi/Documents/final-project-tekle-chronister/client/src/zComponents.js"],"names":["Button","ToggleButton","ToggleButtonGroup","React","useState","CreateTable","props","fields","Object","keys","fieldList","header","map","n","i","data","product","id","ToggleButtonGroupControlled","value","setValue","handleChange","val","Textbox","name","labelCaption","className","attributes","XButton","memo","title","FormTextbox","textArea","FormRadio"],"mappings":"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","sourcesContent":["import Button from 'react-bootstrap/Button';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\n\nimport React, {useState} from \"react\"\n\n// Props\n// fieldList {key: \"Name\"} in Order\n// header true/falseee\n// data []\n\nexport function CreateTable (props) {\n\n  const fields = Object.keys(props.fieldList);\n\n  return (\n\n    <table><tbody>\n\n    {/* Add Header */}\n    {props.header && <tr>{fields.map((n, i) => <th key={i}>{props.fieldList[n]}</th>)}</tr>}\n\n    {/* Add Rows */}\n    {props.data.map(product => (\n      <tr key={product.id}>\n\n        {/* Add Columns/Cells */}\n        {fields.map((n, i)=><td key={product.id + i}>{product[n]}</td>)}\n\n      </tr>\n    ))}\n\n    </tbody></table>\n  )\n\n}\n\n\n// export function Button () {\n\n\n// }\n\n\nexport function ToggleButtonGroupControlled() {\n\n  const [value, setValue] = useState([1, 3]);\n\n  /*\n   * The second argument that will be passed to\n   * `handleChange` from `ToggleButtonGroup`\n   * is the SyntheticEvent object, but we are\n   * not using it in this example so we will omit it.\n   */\n  const handleChange = (val) => setValue(val);\n\n  return (\n    <ToggleButtonGroup type=\"checkbox\" value={value} onChange={handleChange}>\n      <label>Rating</label>\n      <ToggleButton value={1}>Bad</ToggleButton>\n      <ToggleButton value={2}>Good</ToggleButton>\n      <ToggleButton value={3}>Excellent</ToggleButton>\n    </ToggleButtonGroup>\n  );\n}\n\n\n// TextBox with Label\n// Props\n// name - Required\n// labelCaption - Required\n// onChange\nexport function Textbox (props) {\n\n  const {id, name, labelCaption, className, ...attributes} = props\n\n  return [\n  <label htmlFor={id || name} key = {name + 0}>{labelCaption}</label>,\n  <input\n    type=\"text\"\n    key = {name + 1}\n    className= {className || \"mx-sm-3\"}\n    id={id || name}\n    name={name}\n    {...attributes}\n     \n  />\n  ]\n\n}\n\n\n// Returns Bootstrap Button\n// title\nexport const XButton = React.memo(function ({title, ...attributes}) {\n\n  return (<Button {...attributes}>{title || \"Click\"}</Button>)\n\n})\n\n\n\n\n// Textbox or Text Area with Label\nexport function FormTextbox (props) {\n\n  const {textArea, title, name, id={name}, ...attributes} = props\n\n  return (\n    <div className=\"form-group\">\n    <label className=\"control-label col-sm-2\" htmlFor={id}>{title}:</label>\n    <div className=\"col-sm-10\">\n      {textArea\n        ?\n        <textarea required className=\"form-control\" id={id} rows=\"3\" name={name} {...attributes}></textarea>  \n        :\n        <input required type=\"text\" className=\"form-control\" id={id} name={name} {...attributes}/>\n      }\n      \n    </div>\n    </div>\n  )\n\n}\n\n\n// Render Radio Buttons\nexport function FormRadio (props) {\n\n  const {title, name, id={name}, ...attributes} = props\n\n  return (\n\n    <div className=\"form-check\">\n      <input required type=\"radio\" className=\"form-check-input\" id={id} name={name} {...attributes}/>\n      <label className=\"form-check-label\" htmlFor={id}>{title}</label>\n    </div>\n\n  )\n\n}"]},"metadata":{},"sourceType":"module"}